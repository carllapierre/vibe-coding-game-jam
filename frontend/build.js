const fs = require('fs');
const path = require('path');

console.log('Starting build process...');

// Source paths
const sourceFile = path.join(__dirname, '..', 'backend', 'data', 'world.json');

console.log('Checking if source file exists:', sourceFile);
if (!fs.existsSync(sourceFile)) {
  console.error(`ERROR: Source file does not exist: ${sourceFile}`);
  process.exit(1);
}

// Read the world.json file
let worldData;
try {
  const worldFileContent = fs.readFileSync(sourceFile, 'utf8');
  worldData = JSON.parse(worldFileContent);
  console.log(`Successfully read world.json (${worldFileContent.length} bytes)`);
} catch (err) {
  console.error(`Error reading/parsing world.json: ${err.message}`);
  process.exit(1);
}

// Create a JavaScript file with the world data embedded
const worldDataFileContent = `
// This file is auto-generated by the build process
// It contains the embedded world data from backend/data/world.json

export const embeddedWorldData = ${JSON.stringify(worldData, null, 2)};
`;

// Write the embedded data to a JavaScript file
const worldDataJsFile = path.join(__dirname, 'src', 'data', 'embeddedWorldData.js');

// Ensure the data directory exists
const dataDir = path.dirname(worldDataJsFile);
if (!fs.existsSync(dataDir)) {
  console.log(`Creating directory: ${dataDir}`);
  fs.mkdirSync(dataDir, { recursive: true });
}

try {
  fs.writeFileSync(worldDataJsFile, worldDataFileContent);
  console.log(`Successfully created embedded world data file: ${worldDataJsFile}`);
} catch (err) {
  console.error(`Error writing embedded world data: ${err.message}`);
  process.exit(1);
}

// Swap the config files for production build
try {
  const configProdPath = path.join(__dirname, 'src', 'config-prod.js');
  const configPath = path.join(__dirname, 'src', 'config.js');
  
  // Check if config-prod.js exists
  if (!fs.existsSync(configProdPath)) {
    console.error(`ERROR: Production config not found: ${configProdPath}`);
    process.exit(1);
  }
  
  // Copy the production config over the regular config
  fs.copyFileSync(configProdPath, configPath);
  console.log('Switched to production config for the build.');
} catch (err) {
  console.error(`Error swapping config files: ${err.message}`);
  process.exit(1);
}

console.log('Build preparation completed successfully!');

// This script doesn't restore the backup since it runs before the build
// You would need a separate script to run after the build to restore it 